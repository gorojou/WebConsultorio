<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Alert" xml:space="preserve">
    <value>Alert!</value>
  </data>
  <data name="AuthenticationIssues" xml:space="preserve">
    <value>Sorry for some inconvenience in the authentication</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ComparePassword" xml:space="preserve">
    <value>Confirm Password (must match the value entered in the Password field)</value>
  </data>
  <data name="CompleteFields" xml:space="preserve">
    <value>Be sure to complete the following fields:</value>
  </data>
  <data name="ConfirmLogin" xml:space="preserve">
    <value>Login Confirmation</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="ConfirmRegister" xml:space="preserve">
    <value>Register confirmation</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="DateCreated" xml:space="preserve">
    <value>Creation Date</value>
  </data>
  <data name="DateofBirth" xml:space="preserve">
    <value>Date of birth</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="EmailBadFormat" xml:space="preserve">
    <value>Email field is not valid</value>
  </data>
  <data name="Female" xml:space="preserve">
    <value>Female</value>
  </data>
  <data name="ForgotPassword" xml:space="preserve">
    <value>Forgot Password</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="InitDateCareer" xml:space="preserve">
    <value>Init Date Career</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Locality" xml:space="preserve">
    <value>Locality</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Male" xml:space="preserve">
    <value>Male</value>
  </data>
  <data name="medicoscc" xml:space="preserve">
    <value>medicos.cc</value>
  </data>
  <data name="MinimunLength" xml:space="preserve">
    <value>{0} must be at least {2} characters long.</value>
  </data>
  <data name="Mobile_Number" xml:space="preserve">
    <value>Mobile Number</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="OrderNumber" xml:space="preserve">
    <value>Order Number</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="RememberMe" xml:space="preserve">
    <value>Memorize credentials</value>
  </data>
  <data name="RequiredAddress" xml:space="preserve">
    <value>The Address field is required</value>
  </data>
  <data name="RequiredEmail" xml:space="preserve">
    <value>The Email field is required</value>
  </data>
  <data name="RequiredGender" xml:space="preserve">
    <value>The Gender field is required</value>
  </data>
  <data name="RequiredInitDateCareer" xml:space="preserve">
    <value>The Init Date Career field is required</value>
  </data>
  <data name="RequiredLastName" xml:space="preserve">
    <value>The Last Name field is required</value>
  </data>
  <data name="RequiredLocality" xml:space="preserve">
    <value>The Locality field is required</value>
  </data>
  <data name="RequiredMobile_Number" xml:space="preserve">
    <value>The Mobile Number field is required</value>
  </data>
  <data name="RequiredName" xml:space="preserve">
    <value>The Name field is required</value>
  </data>
  <data name="RequiredOrderNumber" xml:space="preserve">
    <value>The Order Number field is required</value>
  </data>
  <data name="RequiredPassword" xml:space="preserve">
    <value>The Password field is required</value>
  </data>
  <data name="RequiredSpecialty" xml:space="preserve">
    <value>The Specialty field is required</value>
  </data>
  <data name="RequiredTaxPayer" xml:space="preserve">
    <value>The Tax Payer field is required</value>
  </data>
  <data name="RequiredZipCode" xml:space="preserve">
    <value>The ZipCode field is required</value>
  </data>
  <data name="ReservedforProfessionals" xml:space="preserve">
    <value>Reserved for professionals</value>
  </data>
  <data name="Specialty" xml:space="preserve">
    <value>Specialty</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Step1" xml:space="preserve">
    <value>Step 1</value>
  </data>
  <data name="Step2" xml:space="preserve">
    <value>Step 2</value>
  </data>
  <data name="Step3" xml:space="preserve">
    <value>Step 3</value>
  </data>
  <data name="TaxPayer" xml:space="preserve">
    <value>Tax Payer</value>
  </data>
  <data name="Understood" xml:space="preserve">
    <value>Got it</value>
  </data>
  <data name="UserFound" xml:space="preserve">
    <value>User Found</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User Not Found</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Zip Code</value>
  </data>
  <data name="crop" xml:space="preserve">
    <value>Crop</value>
  </data>
  <data name="croperror" xml:space="preserve">
    <value>Invalid file. Needs to be at least 100x100 pixels.</value>
  </data>
  <data name="cropinstructions" xml:space="preserve">
    <value>Click and drag to move. Hold shift key to scale.</value>
  </data>
  <data name="croptitle" xml:space="preserve">
    <value>Crop Image</value>
  </data>
  <data name="EmailAlreadyExists" xml:space="preserve">
    <value>Email Already Exists</value>
  </data>
</root>